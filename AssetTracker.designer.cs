#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace asset_tracker_web
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="RBSAssetTracker")]
	public partial class AssetTrackerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaddress(address instance);
    partial void Updateaddress(address instance);
    partial void Deleteaddress(address instance);
    partial void Insertasset(asset instance);
    partial void Updateasset(asset instance);
    partial void Deleteasset(asset instance);
    partial void Insertfacility(facility instance);
    partial void Updatefacility(facility instance);
    partial void Deletefacility(facility instance);
    partial void Insertroom(room instance);
    partial void Updateroom(room instance);
    partial void Deleteroom(room instance);
    #endregion
		
		public AssetTrackerDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RBSAssetTrackerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AssetTrackerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssetTrackerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssetTrackerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssetTrackerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<address> addresses
		{
			get
			{
				return this.GetTable<address>();
			}
		}
		
		public System.Data.Linq.Table<asset> assets
		{
			get
			{
				return this.GetTable<asset>();
			}
		}
		
		public System.Data.Linq.Table<facility> facilities
		{
			get
			{
				return this.GetTable<facility>();
			}
		}
		
		public System.Data.Linq.Table<room> rooms
		{
			get
			{
				return this.GetTable<room>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.address")]
	public partial class address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _line_1;
		
		private string _line_2;
		
		private string _city;
		
		private string _state;
		
		private string _zip;
		
		private EntitySet<facility> _facilities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Online_1Changing(string value);
    partial void Online_1Changed();
    partial void Online_2Changing(string value);
    partial void Online_2Changed();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    partial void OnzipChanging(string value);
    partial void OnzipChanged();
    #endregion
		
		public address()
		{
			this._facilities = new EntitySet<facility>(new Action<facility>(this.attach_facilities), new Action<facility>(this.detach_facilities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_line_1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string line_1
		{
			get
			{
				return this._line_1;
			}
			set
			{
				if ((this._line_1 != value))
				{
					this.Online_1Changing(value);
					this.SendPropertyChanging();
					this._line_1 = value;
					this.SendPropertyChanged("line_1");
					this.Online_1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_line_2", DbType="NVarChar(50)")]
		public string line_2
		{
			get
			{
				return this._line_2;
			}
			set
			{
				if ((this._line_2 != value))
				{
					this.Online_2Changing(value);
					this.SendPropertyChanging();
					this._line_2 = value;
					this.SendPropertyChanged("line_2");
					this.Online_2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zip", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string zip
		{
			get
			{
				return this._zip;
			}
			set
			{
				if ((this._zip != value))
				{
					this.OnzipChanging(value);
					this.SendPropertyChanging();
					this._zip = value;
					this.SendPropertyChanged("zip");
					this.OnzipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="address_facility", Storage="_facilities", ThisKey="id", OtherKey="address_id")]
		public EntitySet<facility> facilities
		{
			get
			{
				return this._facilities;
			}
			set
			{
				this._facilities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_facilities(facility entity)
		{
			this.SendPropertyChanging();
			entity.address = this;
		}
		
		private void detach_facilities(facility entity)
		{
			this.SendPropertyChanging();
			entity.address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.asset")]
	public partial class asset : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _facility_id;
		
		private int _room_id;
		
		private string _sku;
		
		private string _name;
		
		private string _description;
		
		private System.DateTime _add_date;
		
		private System.DateTime _last_scan;
		
		private EntityRef<facility> _facility;
		
		private EntityRef<room> _room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onfacility_idChanging(int value);
    partial void Onfacility_idChanged();
    partial void Onroom_idChanging(int value);
    partial void Onroom_idChanged();
    partial void OnskuChanging(string value);
    partial void OnskuChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void Onadd_dateChanging(System.DateTime value);
    partial void Onadd_dateChanged();
    partial void Onlast_scanChanging(System.DateTime value);
    partial void Onlast_scanChanged();
    #endregion
		
		public asset()
		{
			this._facility = default(EntityRef<facility>);
			this._room = default(EntityRef<room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_facility_id", DbType="Int NOT NULL")]
		public int facility_id
		{
			get
			{
				return this._facility_id;
			}
			set
			{
				if ((this._facility_id != value))
				{
					if (this._facility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfacility_idChanging(value);
					this.SendPropertyChanging();
					this._facility_id = value;
					this.SendPropertyChanged("facility_id");
					this.Onfacility_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_room_id", DbType="Int NOT NULL")]
		public int room_id
		{
			get
			{
				return this._room_id;
			}
			set
			{
				if ((this._room_id != value))
				{
					if (this._room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onroom_idChanging(value);
					this.SendPropertyChanging();
					this._room_id = value;
					this.SendPropertyChanged("room_id");
					this.Onroom_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sku", DbType="NVarChar(25)")]
		public string sku
		{
			get
			{
				return this._sku;
			}
			set
			{
				if ((this._sku != value))
				{
					this.OnskuChanging(value);
					this.SendPropertyChanging();
					this._sku = value;
					this.SendPropertyChanged("sku");
					this.OnskuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(200)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_add_date", DbType="DateTime NOT NULL")]
		public System.DateTime add_date
		{
			get
			{
				return this._add_date;
			}
			set
			{
				if ((this._add_date != value))
				{
					this.Onadd_dateChanging(value);
					this.SendPropertyChanging();
					this._add_date = value;
					this.SendPropertyChanged("add_date");
					this.Onadd_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_scan", DbType="DateTime NOT NULL")]
		public System.DateTime last_scan
		{
			get
			{
				return this._last_scan;
			}
			set
			{
				if ((this._last_scan != value))
				{
					this.Onlast_scanChanging(value);
					this.SendPropertyChanging();
					this._last_scan = value;
					this.SendPropertyChanged("last_scan");
					this.Onlast_scanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="facility_asset", Storage="_facility", ThisKey="facility_id", OtherKey="id", IsForeignKey=true)]
		public facility facility
		{
			get
			{
				return this._facility.Entity;
			}
			set
			{
				facility previousValue = this._facility.Entity;
				if (((previousValue != value) 
							|| (this._facility.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._facility.Entity = null;
						previousValue.assets.Remove(this);
					}
					this._facility.Entity = value;
					if ((value != null))
					{
						value.assets.Add(this);
						this._facility_id = value.id;
					}
					else
					{
						this._facility_id = default(int);
					}
					this.SendPropertyChanged("facility");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="room_asset", Storage="_room", ThisKey="room_id", OtherKey="id", IsForeignKey=true)]
		public room room
		{
			get
			{
				return this._room.Entity;
			}
			set
			{
				room previousValue = this._room.Entity;
				if (((previousValue != value) 
							|| (this._room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._room.Entity = null;
						previousValue.assets.Remove(this);
					}
					this._room.Entity = value;
					if ((value != null))
					{
						value.assets.Add(this);
						this._room_id = value.id;
					}
					else
					{
						this._room_id = default(int);
					}
					this.SendPropertyChanged("room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.facility")]
	public partial class facility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Guid _user_id;
		
		private int _address_id;
		
		private string _name;
		
		private System.DateTime _add_date;
		
		private EntitySet<asset> _assets;
		
		private EntitySet<room> _rooms;
		
		private EntityRef<address> _address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onuser_idChanging(System.Guid value);
    partial void Onuser_idChanged();
    partial void Onaddress_idChanging(int value);
    partial void Onaddress_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onadd_dateChanging(System.DateTime value);
    partial void Onadd_dateChanged();
    #endregion
		
		public facility()
		{
			this._assets = new EntitySet<asset>(new Action<asset>(this.attach_assets), new Action<asset>(this.detach_assets));
			this._rooms = new EntitySet<room>(new Action<room>(this.attach_rooms), new Action<room>(this.detach_rooms));
			this._address = default(EntityRef<address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address_id", DbType="Int NOT NULL")]
		public int address_id
		{
			get
			{
				return this._address_id;
			}
			set
			{
				if ((this._address_id != value))
				{
					if (this._address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onaddress_idChanging(value);
					this.SendPropertyChanging();
					this._address_id = value;
					this.SendPropertyChanged("address_id");
					this.Onaddress_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_add_date", DbType="DateTime NOT NULL")]
		public System.DateTime add_date
		{
			get
			{
				return this._add_date;
			}
			set
			{
				if ((this._add_date != value))
				{
					this.Onadd_dateChanging(value);
					this.SendPropertyChanging();
					this._add_date = value;
					this.SendPropertyChanged("add_date");
					this.Onadd_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="facility_asset", Storage="_assets", ThisKey="id", OtherKey="facility_id")]
		public EntitySet<asset> assets
		{
			get
			{
				return this._assets;
			}
			set
			{
				this._assets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="facility_room", Storage="_rooms", ThisKey="id", OtherKey="facility_id")]
		public EntitySet<room> rooms
		{
			get
			{
				return this._rooms;
			}
			set
			{
				this._rooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="address_facility", Storage="_address", ThisKey="address_id", OtherKey="id", IsForeignKey=true)]
		public address address
		{
			get
			{
				return this._address.Entity;
			}
			set
			{
				address previousValue = this._address.Entity;
				if (((previousValue != value) 
							|| (this._address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._address.Entity = null;
						previousValue.facilities.Remove(this);
					}
					this._address.Entity = value;
					if ((value != null))
					{
						value.facilities.Add(this);
						this._address_id = value.id;
					}
					else
					{
						this._address_id = default(int);
					}
					this.SendPropertyChanged("address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_assets(asset entity)
		{
			this.SendPropertyChanging();
			entity.facility = this;
		}
		
		private void detach_assets(asset entity)
		{
			this.SendPropertyChanging();
			entity.facility = null;
		}
		
		private void attach_rooms(room entity)
		{
			this.SendPropertyChanging();
			entity.facility = this;
		}
		
		private void detach_rooms(room entity)
		{
			this.SendPropertyChanging();
			entity.facility = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.room")]
	public partial class room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _facility_id;
		
		private string _name;
		
		private System.DateTime _add_date;
		
		private EntitySet<asset> _assets;
		
		private EntityRef<facility> _facility;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onfacility_idChanging(int value);
    partial void Onfacility_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onadd_dateChanging(System.DateTime value);
    partial void Onadd_dateChanged();
    #endregion
		
		public room()
		{
			this._assets = new EntitySet<asset>(new Action<asset>(this.attach_assets), new Action<asset>(this.detach_assets));
			this._facility = default(EntityRef<facility>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_facility_id", DbType="Int NOT NULL")]
		public int facility_id
		{
			get
			{
				return this._facility_id;
			}
			set
			{
				if ((this._facility_id != value))
				{
					if (this._facility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfacility_idChanging(value);
					this.SendPropertyChanging();
					this._facility_id = value;
					this.SendPropertyChanged("facility_id");
					this.Onfacility_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_add_date", DbType="DateTime NOT NULL")]
		public System.DateTime add_date
		{
			get
			{
				return this._add_date;
			}
			set
			{
				if ((this._add_date != value))
				{
					this.Onadd_dateChanging(value);
					this.SendPropertyChanging();
					this._add_date = value;
					this.SendPropertyChanged("add_date");
					this.Onadd_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="room_asset", Storage="_assets", ThisKey="id", OtherKey="room_id")]
		public EntitySet<asset> assets
		{
			get
			{
				return this._assets;
			}
			set
			{
				this._assets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="facility_room", Storage="_facility", ThisKey="facility_id", OtherKey="id", IsForeignKey=true)]
		public facility facility
		{
			get
			{
				return this._facility.Entity;
			}
			set
			{
				facility previousValue = this._facility.Entity;
				if (((previousValue != value) 
							|| (this._facility.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._facility.Entity = null;
						previousValue.rooms.Remove(this);
					}
					this._facility.Entity = value;
					if ((value != null))
					{
						value.rooms.Add(this);
						this._facility_id = value.id;
					}
					else
					{
						this._facility_id = default(int);
					}
					this.SendPropertyChanged("facility");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_assets(asset entity)
		{
			this.SendPropertyChanging();
			entity.room = this;
		}
		
		private void detach_assets(asset entity)
		{
			this.SendPropertyChanging();
			entity.room = null;
		}
	}
}
#pragma warning restore 1591
